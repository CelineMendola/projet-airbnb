library("data.table")
library('R.utils')
library("tidyverse")
library(htmlwidgets)
library(rgdal)
data_listings <- data.table::fread("http://data.insideairbnb.com/france/ile-de-france/paris/2021-10-09/data/listings.csv.gz",encoding="UTF-8")
data_calendar<- data.table::fread("http://data.insideairbnb.com/france/ile-de-france/paris/2021-10-09/data/calendar.csv.gz",encoding="UTF-8")
dim(data_listings)
dim(data_calendar)
head(data_calendar)
head(data_listings)
colnames(data_listings)
data_listings%>%summarise_all(funs(sum(is.na(.))))
data_calendar%>%summarise_all(funs(sum(is.na(.))))
data_listings%>%filter_if(is.character,any_vars(.=="N/A"))
data_listings%>%filter_if(is.character,any_vars(.==""))
n_distinct(data_listings$id)
n_distinct(data_listings$listing_url)
#unique(data_listings$neighbourhood_cleansed)
df <- data_listings %>%
rename(arr=neighbourhood_cleansed) %>%
select(id, arr, name, description, property_type, room_type, accommodates, price)
head(df)
library("ggplot2")
#install.packages("ggthemes")
library("ggthemes")
dg<-df%>%count(arr)
montheme<-theme(axis.line.y=element_line(size=0.5,color="grey"),
axis.line.x=element_line(size=1),
axis.ticks.y = element_blank(),
axis.text.x = element_text(size=9,margin = margin(t =0.1, unit = "cm")),
axis.text.y = element_text(size=10,hjust=1,vjust=0.2,face="bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(hjust=0.5,face="bold",color="#666666"))
ggplot(dg, aes(reorder(arr,n),n)) +
geom_col(fill = '#9999CC') +
geom_text(aes(label=n),hjust=-0.3,size=3) +
labs(title="Nombre de listings par arrondissements") +
scale_y_continuous(limits=c(0,8500),breaks=seq(0,8000,1000),expand=c(0,0)) +
coord_flip() +
theme_classic() +
montheme +
theme(legend.position="none")
# Ensemble des types de propriétés présents
u<-unique(df$property_type)
u
unique(df$room_type)
#type appt/studio
type_apart <- c(u[grep("(apartment|chalet|dome|cabin|flat|place)",u,ignore.case=TRUE)],"Casa particular")
#type maison
u1 <- u[-grep("(guesthouse|houseboat|treehouse|earth|Dome)",u,ignore.case=TRUE)]
type_house<-c(u1[grep("(house|cottage|villa)",u1,ignore.case=TRUE)],'Private room in casa particular')
#type loft
type_loft <- u[grep("loft",u,ignore.case=TRUE)]
#type copro
type_condominium <- u[grep("condominium",u,ignore.case=TRUE)]
#type peniche
type_peniche <- u[grep("boat",u,ignore.case=TRUE)]
#type guestsuite
type_guest_suite <- u[grep("guest suite",u,ignore.case=TRUE)]
#type insolite
type_insolite <- u[grep("(treehouse|earth|nature|igloo|bungalow|island|barn|campsite|camper/RV)",u,ignore.case=TRUE)]
#on crée la colonne TYPE
k<-u[grep("(bed and breakfast|guesthouse)",u,ignore.case=TRUE)]
dg<-df %>% select(name,property_type,room_type) %>%
mutate(TYPE = ifelse(property_type %in% type_insolite, "Insolite",
ifelse(property_type %in% type_guest_suite, "guest_suite",
ifelse(property_type %in% type_condominium, "copropriété",
ifelse(property_type %in% type_apart, "appartement/studio",
ifelse(property_type %in% type_house, "house",
ifelse(property_type %in% k & room_type!="Hotel room",
"chambre dhôtes",
ifelse(property_type %in% type_peniche,"peniche",
ifelse(property_type %in% type_loft,"loft",
"hotel")))))))))
#On catégorise les "hotel room" comme des "private room"
dg<-dg %>%
select(name,property_type,TYPE,room_type) %>%
mutate(room_type2= ifelse(room_type=="Hotel room", "Private room",room_type))
library(RColorBrewer)
ggplot(dg,aes(x=TYPE)) +
geom_bar(aes(fill=room_type2)) +
labs(title="Nombre de listings par type") +
scale_y_continuous(limits=c(0,62000),breaks=seq(0,62000,10000),expand=c(0,0)) +
coord_flip() +
montheme +
theme(legend.position=c(0.8,0.8)) +
scale_fill_manual(guide=guide_legend(title = "Type",
labels=c("Entire home/appt", "Private room", "Shared room"),
title.hjust=0.5),
values=c("#FF9933", "#6666CC", "#CCFF99"))
dg<-df %>% filter(accommodates!=0) %>%count(accommodates)
dg
ggplot(dg,aes(accommodates,n)) +
geom_col(fill="#996666") +
labs(x="Nombre de personnes",y="Effectif des listings") +
scale_x_discrete(limits=c(1:16),breaks=seq(0,16,1),expand=c(0,0)) +
scale_y_continuous(limits=c(0,40000),breaks=seq(0,40000,10000),expand=c(0,0)) +
theme(axis.line.y=element_blank(),
axis.line.x=element_line(size=0.5),
axis.ticks.x=element_blank(),
axis.text.x = element_text(size=9,margin = margin(t =-0.05, unit = "cm")),
axis.text.y = element_text(size=10,hjust=1,vjust=0.2,face="bold"),
plot.title =element_text(hjust=0.5,face="bold",color="#666666"))
sum(substr(data_listings$price,1,1)=="$")
min(data_listings$price)
max(data_listings$price)
data_listings%>%filter(price=="$0.00")
data_listings%>%filter(price=="$999.00")
dg <- df%>%filter(accommodates==2)
dg$price<-gsub("[$]","",dg$price)
dg$price<-gsub("[,]","",dg$price)
dg <- dg %>%
select(arr,accommodates,price)%>%
filter(price!="$0.00")%>%
mutate(prix_euro=round(as.numeric(price)*0.84,2))%>%
group_by(arr)%>%
summarise(prix_moyen=round(mean(prix_euro),2))
ggplot(dg,aes(reorder(arr,prix_moyen),prix_moyen)) +
geom_bar(stat="identity",fill = '#9999CC') +
geom_text(aes(label=prix_moyen),hjust=-0.3,size=3) +
labs(title="Prix moyen journalier en euros pour 2 personnes") +
scale_y_continuous(limits=c(0,170),breaks=seq(0,170,10),expand=c(0,0)) +
coord_flip() +
theme_classic() +
montheme +
theme(legend.position="none")
library("leaflet")
library("sp")
library('htmltools')
#on enlève toutes les données type NA et "NA" pour les variables en caractère.
dg <- data_listings %>%
select(-neighbourhood_group_cleansed,-bathrooms,-calendar_updated) %>%
drop_na()%>%
filter_if(is.character,all_vars(.!="N/A"))%>%
#filter_if(is.character,all_vars(.!=""))%>%
filter(price!="$0.00")%>%
filter(accommodates!=0)
#on classe par type et on reconvertit les prix en euro
dg<-dg %>%
mutate(TYPE = ifelse(property_type %in% type_insolite, "Insolite",
ifelse(property_type %in% type_guest_suite, "guest_suite",
ifelse(property_type %in% type_condominium, "copropriété",
ifelse(property_type %in% type_apart, "appartement/studio",
ifelse(property_type %in% type_house, "house",
ifelse(property_type %in% k & room_type!="Hotel room",
"chambre dhôtes",
ifelse(property_type %in% type_peniche,"peniche",
ifelse(property_type %in% type_loft,"loft",
"hotel"))))))))) %>%
mutate(room_type2= ifelse(room_type=="Hotel room", "Private room",room_type))
dg$price<-gsub("[$]","",dg$price)
dg$price<-gsub("[,]","",dg$price)
dg<-dg %>%
mutate(prix_euro=round(as.numeric(price)*0.84,2))
das <- dg%>%filter(room_type2=="Entire home/apt")
dp <- dg%>%filter(room_type2=="Private room")
ds <- dg%>%filter(room_type2=="Shared room")
pal <- colorFactor(palette = c("orange","blue","green"),
levels = c("Entire home/apt","Private room","Shared room"))
m1<-leaflet(options = leafletOptions(dragging = TRUE,minZoom = 12,maxZoom = 18)) %>%
addProviderTiles("CartoDB") %>%
addCircleMarkers(data =das, radius = 2, label = ~htmlEscape(das$name),
color =~pal(room_type2), group = "Entire home/apt",
popup=~paste0(   "<b>", name,"</b>","<br/>",
"<i>",'Prix: ',prix_euro,'€',
"<br/>", 'Nombre de personnes:',accommodates,
"<br/>", "Nombre de lits: ",beds,
"<br/>","salle de bain: ",bathrooms_text))%>%
addCircleMarkers(data = dp, radius = 2, label = ~htmlEscape(dp$name),
color = ~pal(room_type2), group = "Private room",
popup=~paste0(  "<b>", name,"</b>","<br/>",
"<i>",'Prix: ',prix_euro,'€',
"<br/>", 'Nombre de personnes:',accommodates,
"<br/>", "Nombre de lits: ",beds,
"<br/>","salle de bain: ",bathrooms_text))%>%
addCircleMarkers(data = ds, radius = 2, label = ~htmlEscape(ds$name),
color =~pal(room_type2), group = "Shared room",
popup=~paste0(   "<b>", name,"</b>","<br/>",
"<i>",'Prix: ',prix_euro,'€',
"<br/>", 'Nombre de personnes:',accommodates,
"<br/>", "Nombre de lits: ",beds,
"<br/>","salle de bain: ",bathrooms_text))%>%
addLayersControl(overlayGroups= c("Entire home/apt","Private room","Shared room"))%>%
setView(lng = 2.348, lat = 48.862725, zoom = 11)
m1
#saveWidget(m1, file="listings.html")
library('geojson')
library('rgdal')
paris = readOGR(dsn = "./arrondissements",layer="arrondissements",encoding="UTF-8",use_iconv=TRUE)
paris = readOGR(dsn = "./arrondissements",layer="arrondissements",encoding="UTF-8",use_iconv=TRUE)
paris = readOGR(dsn = "./arrondissements",layer="arrondissements",encoding="UTF-8",use_iconv=TRUE)
paris = readOGR(dsn = "./arrondissements",layer="arrondissements",encoding="UTF-8",use_iconv=TRUE)
dh<-data_listings
dh<-dh%>%filter(accommodates!=0,price!="$0.00")%>%rename('l_aroff'=neighbourhood_cleansed)%>%select(id,name,property_type,room_type,l_aroff,latitude,longitude,price)
dh$price<-gsub("[$]","",dh$price)
dh$price<-gsub("[,]","",dh$price)
dh<-dh%>%mutate(prix_euro=round(as.numeric(price)*0.84,2))
dh <- dh%>%group_by(l_aroff)%>%summarise(nb=n(), prix_moyen=round(mean(prix_euro),2))
paris@data <- left_join(paris@data,dh,by="l_aroff")
library('RColorBrewer')
qpal <- colorNumeric(palette = "YlOrRd",domain = paris@data$prix_moyen)
m2<-paris %>%
leaflet(options = leafletOptions(dragging = TRUE,minZoom = 12,maxZoom = 18)) %>%
addProviderTiles("CartoDB") %>%
addPolygons(fillColor = ~qpal(prix_moyen),weight = 1,color="black",opacity=1,fillOpacity = 0.7,
dashArray="5",
label = ~paste0(l_aroff," : ",prix_moyen," €"),
highlight = highlightOptions(weight = 2,color = "black",bringToFront = TRUE,dashArray="5")) %>%
addLegend(values=~prix_moyen,pal=qpal,title="Prix moyen par jour(€)",opacity = 0.7)%>%
setView(lng = 2.348, lat = 48.862725, zoom = 10)
m2
#saveWidget(m2, file="prix_moyen_arrondissement.html")
hpal<- colorNumeric(palette = "BuPu",domain = paris@data$nb)
m3 <- paris %>%
leaflet(options = leafletOptions(dragging = TRUE,minZoom = 12,maxZoom = 18)) %>%
addProviderTiles("CartoDB") %>%
addPolygons(fillColor = ~hpal(nb),weight = 1,color="white",opacity=1,fillOpacity = 0.8,
label = ~paste0(l_aroff," : ",nb),
highlight = highlightOptions(weight = 2,color = "white",bringToFront = TRUE)) %>%
addLegend(values=~nb,pal=hpal,title="Nombre de listings",opacity=0.8)%>%
setView(lng = 2.348, lat = 48.862725, zoom = 10)
m3
#saveWidget(m3, file="nb_listings_arrondissement.html")
m4<-data_listings %>%
select(name,latitude,longitude) %>%
leaflet() %>%
addProviderTiles("CartoDB") %>%
addCircleMarkers(radius = 5, label = ~name,
color = "red",
clusterOptions= markerClusterOptions())
m4
#saveWidget(m4, file="clustering.html")
da<-data_calendar%>%rename("id"=listing_id)%>%filter(available=='t')%>%group_by(date)%>%summarise(nombre=n_distinct(id))
ggplot(da,aes(date,nombre))+
geom_line(color="#FFCC33",size=1)+
labs(title="Evolution du nombre de listings disponibles",x="Date")+
theme_minimal()+
theme(plot.title=element_text(hjust=0.5),
axis.ticks=element_line(size=0.3),
axis.ticks.length=unit(0.1,"cm"),
axis.line=element_line(size=0.3))+
scale_y_continuous(limits=c(0,25000),breaks=seq(0,25000,5000))+
scale_x_date(date_breaks = "2 months", date_labels = "%b%Y")
